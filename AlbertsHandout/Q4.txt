a) Valid.

a is a pointer to the first index of the string "hello".
When we access a[1], we get e. However, we then get it's address, using &a[1]. 

This means that &a[1] is the address of the character e. It's a valid pointer. We then assign p to point to this same character.

When we print, remember we print until the null character is reached, which is at the end of hello. We start at e, then keep going. Therefore, we print "ello".

=================================================

b) Invalid. Produces a seg fault.

"world" is being put in the read only parts of memory in heap. 

Making p a pointer that makes any writing operation on this memory illegal. Hence, producing the seg fault.


"While doing:

char s[] = "Hello world";

puts the literal string in read-only memory in heap and makes a copy of the string in newly allocated memory on the stack. Thus making

s[0] = 'J';   

legal"


=================================================

c) Although this looks valid at first glance it's invalid and
produces a compilation error. See Q4Example.PNG


a[] is an array type, whereas p is a pointer to the first index of array "world". You may think that a[] is also a pointer but the compiler won't work with that.

Given:
int arr1[10];
int arr2[10];

arr1 = arr2;

It's the equivalent of saying arr1 = &arr2[0] which tries
to assign an array type to a pointer.

"char* and char[] are different types, but it's not immediately apparent in all cases. This is because arrays decay into pointers, meaning that if an expression of type char[] is provided where one of type char* is expected, the compiler automatically converts the array into a pointer to its first element."

Notice that we can not decay or upcast a pointer to a char[] type in that explanation, though we can do the inverse.
