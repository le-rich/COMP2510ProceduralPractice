a) Invalid. Will produce a runtime error.

Remember that char arrays are pointers to the first element
of the array. In the example, we're trying to access the address of the pointer itself. 

=================================================

b) Valid. Outputs "whrld"

First we access the [1th] value of "world", which is 'o'.
We then set that to the value that is a is pointing to.
Which in this case, is the first letter of "hello".
Because remember, char arrays are pointers to the first element of the array.

p[1] is now 'h'.
printf then prints the entire string p, "whrld".

=================================================

c) Although this looks valid at first glance it's invalid and
produces a compilation error. See Q4Example.PNG


a[] is an array type, whereas p is a pointer to the first index of array "world". You may think that a[] is also a pointer but the compiler won't work with that.

Given:
int arr1[10];
int arr2[10];

arr1 = arr2;

It's the equivalent of saying arr1 = &arr2[0] which tries
to assign an array type to a pointer.

